// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package internal

import (
	"github.com/epiehl93/h24-notifier/internal/adapter"
	"github.com/epiehl93/h24-notifier/internal/aggregator"
	"github.com/epiehl93/h24-notifier/internal/notificator"
	"github.com/epiehl93/h24-notifier/internal/web"
	"github.com/shurcooL/graphql"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeRegistry(db *gorm.DB, gql *graphql.Client) adapter.Registry {
	wishlistRepository := adapter.NewWishlistRepository(db)
	itemRepository := adapter.NewItemRepository(db)
	h24Connector := adapter.NewH24Connector(gql)
	cycleRepository := adapter.NewCycleRepository(db)
	registry := adapter.NewRegistry(wishlistRepository, itemRepository, h24Connector, cycleRepository)
	return registry
}

func InitializeApp(r *adapter.Registry) (web.App, error) {
	wishlistController := web.NewWishlistController(r)
	healthController := web.NewHealthController(r)
	itemController := web.NewItemController(r)
	applicationContext := web.NewApplicationContext(r)
	app, err := web.NewApp(r, wishlistController, healthController, itemController, applicationContext)
	if err != nil {
		return nil, err
	}
	return app, nil
}

func InitializeOutletAggregator(r *adapter.Registry) aggregator.OutletAggregator {
	outletAggregator := aggregator.NewOutletAggregator(r)
	return outletAggregator
}

func InitializeNotificator(r *adapter.Registry) notificator.Notificator {
	notificatorNotificator := notificator.NewNotificator(r)
	return notificatorNotificator
}
